As of my knowledge cutoff date in September 2021, it is not possible to create both Linux and Windows nodes in a single node pool 
within an Azure Kubernetes Service (AKS) cluster. AKS does not support mixing Linux and Windows nodes in the same node pool.

The reason for this limitation lies in the underlying architectural differences between Linux and Windows nodes. 
They have different kernel architectures, container runtimes, and OS-specific configurations, 
which makes it impractical to run them in the same node pool.

To support both Linux and Windows containers in AKS, you need to create separate node poolsâ€”one for Linux-based nodes and another for 
Windows-based nodes. Each node pool is dedicated to its respective operating system, and you can deploy workloads accordingly.

Here's a summary of the approach to support both Linux and Windows containers in AKS:

Create an AKS cluster with the azurerm_kubernetes_cluster resource and define a default node pool for Linux nodes.
Create an additional node pool for Windows nodes using the azurerm_kubernetes_cluster_node_pool resource, as shown in the previous examples.
Deploy Linux-based workloads to the default node pool and Windows-based workloads to the Windows node pool.
Please note that Microsoft may introduce new features or updates after my knowledge cutoff date, so it's always a
good idea to check the latest documentation and official announcements from Azure to see if there have been any changes or improvements 
in AKS regarding this feature.


resource "azurerm_kubernetes_cluster" "aks_cluster" {
  name                = "${azurerm_resource_group.aks_rg.name}-cluster"
  location            = azurerm_resource_group.aks_rg.location
  resource_group_name = azurerm_resource_group.aks_rg.name
  dns_prefix          = "${azurerm_resource_group.aks_rg.name}-cluster"
  kubernetes_version  = data.azurerm_kubernetes_service_versions.current.latest_version
  node_resource_group = "${azurerm_resource_group.aks_rg.name}-nrg"

  default_node_pool {
    name                 = "systempool"
    vm_size              = "Standard_DS2_v2"
    orchestrator_version = data.azurerm_kubernetes_service_versions.current.latest_version
    availability_zones   = [1, 2, 3]
    enable_auto_scaling  = true
    max_count            = 3
    min_count            = 1
    os_disk_size_gb      = 30
    type                 = "VirtualMachineScaleSets"
    node_labels = {
      "nodepool-type"    = "system"
      "environment"      = "dev"
      "nodepoolos"       = "linux"
      "app"              = "system-apps" 
    } 
    tags = {
      "nodepool-type"    = "system"
      "environment"      = "dev"
      "nodepoolos"       = "linux"
      "app"              = "system-apps" 
    } 
  }

  # Windows Node Pool
  node_pool {
    name                 = "windowspool"
    vm_size              = "Standard_D2s_v3"
    orchestrator_version = data.azurerm_kubernetes_service_versions.current.latest_version
    availability_zones   = [1, 2, 3]
    enable_auto_scaling  = true
    max_count            = 3
    min_count            = 1
    os_disk_size_gb      = 128
    type                 = "VirtualMachineScaleSets"
    os_type              = "Windows"
    node_labels = {
      "nodepool-type"    = "windows"
      "environment"      = "dev"
      "nodepoolos"       = "windows"
      "app"              = "windows-apps"
    }
    tags = {
      "nodepool-type"    = "windows"
      "environment"      = "dev"
      "nodepoolos"       = "windows"
      "app"              = "windows-apps"
    }
  }

  # Identity (System Assigned or Service Principal)
  identity {
    type = "SystemAssigned"
  }

  # Add On Profiles
  addon_profile {
    azure_policy {
      enabled =  true
    }
    oms_agent {
      enabled                   =  true
      log_analytics_workspace_id = azurerm_log_analytics_workspace.insights.id
    }
  }

  # RBAC and Azure AD Integration Block
  role_based_access_control {
    enabled = true
    azure_active_directory {
      managed               = true
      admin_group_object_ids = [azuread_group.aks_administrators.id]
    }
  }

  # Windows Profile
  windows_profile {
    admin_username = var.windows_admin_username
    admin_password = var.windows_admin_password
  }

  # Linux Profile
  linux_profile {
    admin_username = "ubuntu"
    ssh_key {
      key_data = file(var.ssh_public_key)
    }
  }

  # Network Profile
  network_profile {
    network_plugin   = "azure"
    load_balancer_sku = "Standard"
  }

  tags = {
    Environment = "dev"
  }
}
